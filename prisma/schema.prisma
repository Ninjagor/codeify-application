generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id               String             @id @default(uuid())
  name             String?
  email            String             @unique
  emailVerified    DateTime?
  isEmailVerified  Boolean            @default(false)
  hashedPassword   String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  coursesAsStudent StudentsOfCourse[]
}

model Teacher {
  id                String             @id @default(uuid())
  name              String?
  email             String             @unique
  emailVerified     DateTime?
  isEmailVerified   Boolean            @default(false)
  isTeacherVerified Boolean            @default(false)
  coursesTaught     TeachersOfCourse[]
  hashedPassword    String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Administrator {
  id                      String    @id @default(uuid())
  name                    String?
  email                   String    @unique
  emailVerified           DateTime?
  isEmailVerified         Boolean   @default(false)
  isAdministratorVerified Boolean   @default(false)
  hashedPassword          String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model Course {
  id         String             @id @default(cuid())
  courseName String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  topics     String[]
  teachers   TeachersOfCourse[]
  students   StudentsOfCourse[]
}

model TeachersOfCourse {
  id        String   @id @default(cuid())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  teacherId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, teacherId])
}

model StudentsOfCourse {
  id                String   @id @default(cuid())
  student           Student  @relation(fields: [studentId], references: [id])
  studentId         String
  course            Course   @relation(fields: [courseId], references: [id])
  courseId          String
  isCompletedCourse Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([studentId, courseId])
}
